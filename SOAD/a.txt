============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.1.2, py-1.9.0, pluggy-0.13.1
rootdir: E:\IIIT Sri City\Semester-5\SOAD
plugins: django-4.1.0
collected 8 items
cache
    Return a cache object that can persist state between testing sessions.
    
    cache.get(key, default)
    cache.set(key, value)
    
    Keys must be ``/`` separated strings, where the first part is usually the
    name of your plugin or application to avoid clashes with other cache users.
    
    Values can be any object handled by the json stdlib module.

capsys
    Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``.
    
    The captured output is made available via ``capsys.readouterr()`` method
    calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``text`` objects.

capsysbinary
    Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``.
    
    The captured output is made available via ``capsysbinary.readouterr()``
    method calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``bytes`` objects.

capfd
    Enable text capturing of writes to file descriptors ``1`` and ``2``.
    
    The captured output is made available via ``capfd.readouterr()`` method
    calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``text`` objects.

capfdbinary
    Enable bytes capturing of writes to file descriptors ``1`` and ``2``.
    
    The captured output is made available via ``capfd.readouterr()`` method
    calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``byte`` objects.

doctest_namespace [session scope]
    Fixture that returns a :py:class:`dict` that will be injected into the
    namespace of doctests.

pytestconfig [session scope]
    Session-scoped fixture that returns the :class:`_pytest.config.Config` object.
    
    Example::
    
        def test_foo(pytestconfig):
            if pytestconfig.getoption("verbose") > 0:
                ...

record_property
    Add extra properties to the calling test.
    
    User properties become part of the test report and are available to the
    configured reporters, like JUnit XML.
    
    The fixture is callable with ``name, value``. The value is automatically
    XML-encoded.
    
    Example::
    
        def test_function(record_property):
            record_property("example_key", 1)

record_xml_attribute
    Add extra xml attributes to the tag for the calling test.
    
    The fixture is callable with ``name, value``. The value is
    automatically XML-encoded.

record_testsuite_property [session scope]
    Record a new ``<property>`` tag as child of the root ``<testsuite>``.
    
    This is suitable to writing global information regarding the entire test
    suite, and is compatible with ``xunit2`` JUnit family.
    
    This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:
    
    .. code-block:: python
    
        def test_foo(record_testsuite_property):
            record_testsuite_property("ARCH", "PPC")
            record_testsuite_property("STORAGE_TYPE", "CEPH")
    
    ``name`` must be a string, ``value`` will be converted to a string and properly xml-escaped.
    
    .. warning::
    
        Currently this fixture **does not work** with the
        `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ plugin. See issue
        `#7767 <https://github.com/pytest-dev/pytest/issues/7767>`__ for details.

caplog
    Access and control log capturing.
    
    Captured logs are available through the following properties/methods::
    
    * caplog.messages        -> list of format-interpolated log messages
    * caplog.text            -> string containing formatted log output
    * caplog.records         -> list of logging.LogRecord instances
    * caplog.record_tuples   -> list of (logger_name, level, message) tuples
    * caplog.clear()         -> clear captured records and formatted log output string

monkeypatch
    A convenient fixture for monkey-patching.
    
    The fixture provides these methods to modify objects, dictionaries or
    os.environ::
    
        monkeypatch.setattr(obj, name, value, raising=True)
        monkeypatch.delattr(obj, name, raising=True)
        monkeypatch.setitem(mapping, name, value)
        monkeypatch.delitem(obj, name, raising=True)
        monkeypatch.setenv(name, value, prepend=False)
        monkeypatch.delenv(name, raising=True)
        monkeypatch.syspath_prepend(path)
        monkeypatch.chdir(path)
    
    All modifications will be undone after the requesting test function or
    fixture has finished. The ``raising`` parameter determines if a KeyError
    or AttributeError will be raised if the set/deletion operation has no target.

recwarn
    Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.
    
    See http://docs.python.org/library/warnings.html for information
    on warning categories.

tmpdir_factory [session scope]
    Return a :class:`_pytest.tmpdir.TempdirFactory` instance for the test session.

tmp_path_factory [session scope]
    Return a :class:`_pytest.tmpdir.TempPathFactory` instance for the test session.

tmpdir
    Return a temporary directory path object which is unique to each test
    function invocation, created as a sub directory of the base temporary
    directory.
    
    The returned object is a `py.path.local`_ path object.
    
    .. _`py.path.local`: https://py.readthedocs.io/en/latest/path.html

tmp_path
    Return a temporary directory path object which is unique to each test
    function invocation, created as a sub directory of the base temporary
    directory.
    
    The returned object is a :class:`pathlib.Path` object.
    
    .. note::
    
        In python < 3.6 this is a pathlib2.Path.


---------------- fixtures defined from pytest_django.fixtures -----------------
db
    Require a django test database.
    
    This database will be setup with the default fixtures and will have
    the transaction management disabled. At the end of the test the outer
    transaction that wraps the test itself will be rolled back to undo any
    changes to the database (in case the backend supports transactions).
    This is more limited than the ``transactional_db`` resource but
    faster.
    
    If multiple database fixtures are requested, they take precedence
    over each other in the following order (the last one wins): ``db``,
    ``transactional_db``, ``django_db_reset_sequences``.

transactional_db
    Require a django test database with transaction support.
    
    This will re-initialise the django database for each test and is
    thus slower than the normal ``db`` fixture.
    
    If you want to use the database with transactions you must request
    this resource.
    
    If multiple database fixtures are requested, they take precedence
    over each other in the following order (the last one wins): ``db``,
    ``transactional_db``, ``django_db_reset_sequences``.

django_db_reset_sequences
    Require a transactional test database with sequence reset support.
    
    This behaves like the ``transactional_db`` fixture, with the addition
    of enforcing a reset of all auto increment sequences.  If the enquiring
    test relies on such values (e.g. ids as primary keys), you should
    request this resource to ensure they are consistent across tests.
    
    If multiple database fixtures are requested, they take precedence
    over each other in the following order (the last one wins): ``db``,
    ``transactional_db``, ``django_db_reset_sequences``.

client
    A Django test client instance.

async_client
    A Django test async client instance.

django_user_model
    The class of Django's user model.

django_username_field
    The fieldname for the username used with Django's user model.

admin_user
    A Django admin user.
    
    This uses an existing user with username "admin", or creates a new one with
    password "password".

admin_client
    A Django test client logged in as an admin user.

rf
    RequestFactory instance

async_rf
    AsyncRequestFactory instance

django_db_modify_db_settings_tox_suffix [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:36: no docstring available

settings
    A Django settings object which restores changes after the testrun

live_server [session scope]
    Run a live Django server in the background during tests
    
    The address the server is started from is taken from the
    --liveserver command line option or if this is not provided from
    the DJANGO_LIVE_TEST_SERVER_ADDRESS environment variable.  If
    neither is provided ``localhost`` is used.  See the Django
    documentation for its full syntax.
    
    NOTE: If the live server needs database access to handle a request
          your test will have to request database access.  Furthermore
          when the tests want to see data added by the live-server (or
          the other way around) transactional database access will be
          needed as data inside a transaction is not shared between
          the live server and test code.
    
          Static assets will be automatically served when
          ``django.contrib.staticfiles`` is available in INSTALLED_APPS.

django_db_modify_db_settings_xdist_suffix [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:46: no docstring available

django_assert_num_queries
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:481: no docstring available

django_assert_max_num_queries
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:486: no docstring available

django_db_modify_db_settings_parallel_suffix [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:56: no docstring available

django_db_modify_db_settings [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:64: no docstring available

django_db_use_migrations [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:69: no docstring available

django_db_keepdb [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:74: no docstring available

django_db_createdb [session scope]
    d:\programs\python\python38\lib\site-packages\pytest_django\fixtures.py:79: no docstring available

django_db_setup [session scope]
    Top level fixture to ensure test databases are available


----------------- fixtures defined from pytest_django.plugin ------------------
django_test_environment [session scope]
    Ensure that Django is loaded and has its testing environment setup.
    
    XXX It is a little dodgy that this is an autouse fixture.  Perhaps
        an email fixture should be requested in order to be able to
        use the Django email machinery just like you need to request a
        db fixture for access to the Django database, etc.  But
        without duplicating a lot more of Django's test support code
        we need to follow this model.

django_db_blocker [session scope]
    Wrapper around Django's database access.
    
    This object can be used to re-enable database access.  This fixture is used
    internally in pytest-django to build the other fixtures and can be used for
    special database handling.
    
    The object is a context manager and provides the methods
    .unblock()/.block() and .restore() to temporarily enable database access.
    
    This is an advanced feature that is meant to be used to implement database
    fixtures.

mailoutbox
    d:\programs\python\python38\lib\site-packages\pytest_django\plugin.py:477: no docstring available

django_mail_patch_dns
    d:\programs\python\python38\lib\site-packages\pytest_django\plugin.py:487: no docstring available

django_mail_dnsname
    d:\programs\python\python38\lib\site-packages\pytest_django\plugin.py:494: no docstring available


----------------------- fixtures defined from test_file -----------------------
error_fixture
    Class\test_file.py:5: no docstring available


============================== warnings summary ===============================
d:\programs\python\python38\lib\site-packages\pyreadline\py3k_compat.py:8
  d:\programs\python\python38\lib\site-packages\pyreadline\py3k_compat.py:8: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    return isinstance(x, collections.Callable)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
============================= 1 warning in 0.68s ==============================
